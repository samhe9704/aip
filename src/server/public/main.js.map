{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-plan/add-plan.component.css","webpack:///./src/app/add-plan/add-plan.component.html","webpack:///./src/app/add-plan/add-plan.component.ts","webpack:///./src/app/add-user/add-user.component.css","webpack:///./src/app/add-user/add-user.component.html","webpack:///./src/app/add-user/add-user.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customer-item/customer-item.component.css","webpack:///./src/app/customer-item/customer-item.component.html","webpack:///./src/app/customer-item/customer-item.component.ts","webpack:///./src/app/customer-list/customer-list.component.css","webpack:///./src/app/customer-list/customer-list.component.html","webpack:///./src/app/customer-list/customer-list.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/menu-bar/menu-bar.component.css","webpack:///./src/app/menu-bar/menu-bar.component.html","webpack:///./src/app/menu-bar/menu-bar.component.ts","webpack:///./src/app/plan-item/plan-item.component.css","webpack:///./src/app/plan-item/plan-item.component.html","webpack:///./src/app/plan-item/plan-item.component.ts","webpack:///./src/app/plan-list/plan-list.component.css","webpack:///./src/app/plan-list/plan-list.component.html","webpack:///./src/app/plan-list/plan-list.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/service/authenticate/authenticate.service.ts","webpack:///./src/app/service/customer/customer.service.ts","webpack:///./src/app/service/guard/authenticate.guard.ts","webpack:///./src/app/service/plan/plan.service.ts","webpack:///./src/app/service/user/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".add-plan-container {\\r\\n  max-width: 960px;\\r\\n  margin: 50px auto;\\r\\n}\"","module.exports = \"<div class=\\\"add-plan-container\\\">\\r\\n\\r\\n  <div class=\\\"ui icon message\\\" *ngIf=\\\"newPlan\\\">\\r\\n    <i class=\\\"notched check green icon\\\"></i>\\r\\n    <i class=\\\"close icon\\\" (click)=\\\"newPlan = null\\\"></i>\\r\\n    <div class=\\\"content\\\">\\r\\n      <div class=\\\"header\\\">\\r\\n        New plan added!\\r\\n      </div>\\r\\n      <p>Title: {{newPlan.title}}</p>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n<form class=\\\"ui big form\\\" #addPlanForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(addPlanForm)\\\"> \\r\\n  <h4 class=\\\"ui dividing header\\\">Plan information</h4>\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Title</label>\\r\\n        <input type=\\\"text\\\" name=\\\"title\\\" required placeholder=\\\"Title\\\" ngModel>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n        <h4 class=\\\"ui dividing header\\\">Date & Time</h4>\\r\\n      <div class=\\\"fields\\\">\\r\\n        <div class=\\\"three wide field\\\">\\r\\n          <label>Start time</label>\\r\\n            <input type=\\\"text\\\" id=\\\"start\\\" class=\\\"form-control\\\" name=\\\"start\\\" \\r\\n              pattern=\\\"([01]?[0-9]{1}|2[0-3]{1}):[0-5]{1}[0-9]{1}\\\" required \\r\\n              placeholder=\\\"Start time\\\" [(ngModel)]=\\\"plan.start\\\" #start=\\\"ngModel\\\" >\\r\\n                <div [hidden]=\\\"start.valid || start.pristine\\\"\\r\\n                  class=\\\"alert alert-danger\\\">\\r\\n                  Please enter the time in xx:xx.\\r\\n                </div>\\r\\n        </div>\\r\\n\\r\\n          <div class=\\\"three wide field\\\">\\r\\n                <label>Duration(hr)</label>\\r\\n                  <input type=\\\"text\\\" id=\\\"duration\\\" class=\\\"form-control\\\" name=\\\"duration\\\" required placeholder=\\\"duration\\\"\\r\\n                    pattern=\\\"[1-3]{1}\\\" [(ngModel)]=\\\"plan.duration\\\" #duration=\\\"ngModel\\\">\\r\\n                      <div [hidden]=\\\"duration.valid || duration.pristine\\\"\\r\\n                        class=\\\"alert alert-danger\\\">\\r\\n                        <div class=\\\"ui negative message\\\">\\r\\n                          <div class=\\\"text\\\">\\r\\n                            duration between 1 - 3 hours!!\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n          </div>\\r\\n      </div>\\r\\n      <div class=\\\"fields\\\">\\r\\n        <div class=\\\"inline fields\\\">\\r\\n          <label>Week</label>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Monday\\\" required ngModel>Monday<br>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Tuesday\\\" required ngModel>Tuesday<br>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Wednesday\\\" required ngModel>Wednesday<br>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Thursday\\\" required ngModel>Thursday<br>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Friday\\\" required ngModel>Friday<br>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Saturday\\\" required ngModel>Saturday<br>\\r\\n          <input type=\\\"radio\\\" name=\\\"week\\\" value=\\\"Sunday\\\" required ngModel>Sunday<br>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Coach</label>\\r\\n        <input type=\\\"text\\\" id=\\\"coach\\\" class=\\\"form-control\\\" name=\\\"coach\\\" required placeholder=\\\"Coach\\\"\\r\\n          pattern=\\\"[A-Z]{1}[a-z].{0,}\\\" [(ngModel)]=\\\"plan.coach\\\" #coach=\\\"ngModel\\\">\\r\\n            <div [hidden]=\\\"coach.valid || coach.pristine\\\"\\r\\n             class=\\\"alert alert-danger\\\">\\r\\n              <div class=\\\"ui negative message\\\">\\r\\n                <div class=\\\"header\\\">\\r\\n                    Coach name should be uppercase!\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Content</label>\\r\\n        <input type=\\\"text\\\" name=\\\"content\\\" required placeholder=\\\"Training plan's content\\\" ngModel>\\r\\n    </div>\\r\\n    <div class=\\\"inline fields\\\">\\r\\n        <label>Type of training plan:</label>\\r\\n          <input type=\\\"radio\\\" required name=\\\"type\\\" value=\\\"A\\\" ngModel> A-Slim<br>\\r\\n          <input type=\\\"radio\\\" required name=\\\"type\\\" value=\\\"B\\\" ngModel> B-Muscle<br>\\r\\n          <input type=\\\"radio\\\" required name=\\\"type\\\" value=\\\"C\\\" ngModel> C-Fitness<br>\\r\\n    </div>\\r\\n      <button type=\\\"submit\\\" [disabled]=\\\"addPlanForm.invalid\\\" class=\\\"ui submit large blue button right floated\\\">Submit</button>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { PlanService } from '../service/plan/plan.service';\r\nimport { Plan } from '../model/plan';\r\n\r\n@Component({\r\n  selector: 'app-add-plan',\r\n  templateUrl: './add-plan.component.html',\r\n  styleUrls: ['./add-plan.component.css']\r\n})\r\nexport class AddPlanComponent implements OnInit {\r\n\r\n  constructor(private planService: PlanService) { }\r\n  // give newPlan a type of Plan\r\n  newPlan: Plan;\r\n  // give plan a type of Plan which can contains attributes\r\n  plan: Plan = {};\r\n\r\n  ngOnInit() {}\r\n\r\n  onSubmit(form: NgForm) {\r\n\r\n    const formInput = Object.assign({}, form.value);\r\n    // set the form value to each field\r\n    const plan: Plan = {\r\n      title: formInput.title,\r\n      time: `Start at: ${formInput.start}  Duration: ${formInput.duration} hour  On: ${formInput.week}`,\r\n      coach: `Coach:  ${formInput.coach}`,\r\n      content: formInput.content,\r\n      type: formInput.type,\r\n    };\r\n\r\n    this.planService.postPlan(plan)\r\n    .subscribe(data => {\r\n      // reset the form\r\n      form.reset();\r\n      // push the value in data to newPlan\r\n      this.newPlan = data;\r\n    });\r\n  }\r\n}\r\n","module.exports = \".add-user-container {\\r\\n    max-width: 500px;\\r\\n    margin: 50px auto;\\r\\n  }\"","module.exports = \"<div class=\\\"add-user-container\\\">\\r\\n\\r\\n    <div class=\\\"ui icon message\\\" *ngIf=\\\"newUser\\\">\\r\\n        <i class=\\\"notched check green icon\\\"></i>\\r\\n        <i class=\\\"close icon\\\" (click)=\\\"newUser = null\\\"></i>\\r\\n        <div class=\\\"content\\\">\\r\\n          <div class=\\\"header\\\">\\r\\n            New user can log in now!\\r\\n          </div>\\r\\n          <p>Username: {{newUser.username}}</p>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n  <form class=\\\"ui big form\\\" #addUserForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(addUserForm)\\\">\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Username</label>\\r\\n        <input id=\\\"username\\\" type=\\\"text\\\" class=\\\"form-control\\\" required placeholder=\\\"Enter your username\\\"\\r\\n          pattern=\\\"[a-z]{4}[0-9]{3}\\\" [(ngModel)]=\\\"user.username\\\" name=\\\"username\\\" #username=\\\"ngModel\\\">\\r\\n        <div [hidden]=\\\"username.valid || username.pristine\\\"\\r\\n          class=\\\"alert alert-danger\\\">\\r\\n            The sign up pattern must be like eg.ffff222 \\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Password</label>\\r\\n        <input id=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\" required name=\\\"password\\\" placeholder=\\\"Enter your password\\\"\\r\\n          minlength=\\\"6\\\" [(ngModel)]=\\\"user.password\\\" #password=\\\"ngModel\\\">\\r\\n        <div [hidden]=\\\"password.valid || password.pristine\\\"\\r\\n          class=\\\"alert alert-danger\\\">\\r\\n            The password must be at least 6 words! \\r\\n        </div>\\r\\n    </div>\\r\\n    \\r\\n      <button type=\\\"submit\\\" class=\\\"ui primary button float right floated\\\"\\r\\n           [disabled]=\\\"addUserForm.invalid\\\">Sign Up</button>\\r\\n    </form>\\r\\n  </div>\\r\\n    \"","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { UserService } from '../service/user/user.service';\r\nimport { User } from '../model/user';\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-user',\r\n  templateUrl: './add-user.component.html',\r\n  styleUrls: ['./add-user.component.css']\r\n})\r\nexport class AddUserComponent implements OnInit {\r\n  // give newUser a type of User\r\n  newUser: User;\r\n  // initialize user to User which can contains attribute\r\n  user: User = {};\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n\r\n    const formInput = Object.assign({}, form.value);\r\n    // set the form value to each field\r\n    const user: User = {\r\n      username: formInput.username,\r\n      password: formInput.password\r\n    };\r\n\r\n    this.userService.postUser(user)\r\n    .subscribe(data => {\r\n      // reset the form\r\n      form.reset();\r\n      // pass the data to newUser\r\n      this.newUser = data;\r\n    }, err => {\r\n      if (err.status === 409 ) {\r\n        window.alert('This user is already registered.');\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { CustomerListComponent } from './customer-list/customer-list.component';\r\nimport { PlanListComponent } from './plan-list/plan-list.component';\r\nimport { CustomerItemComponent } from './customer-item/customer-item.component';\r\nimport { AddPlanComponent } from './add-plan/add-plan.component';\r\nimport { AuthenticateGuard } from './service/guard/authenticate.guard';\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', redirectTo: 'plans', pathMatch: 'full' },\r\n\r\n  {path: 'register', component: RegisterComponent},\r\n\r\n  {path: 'login', component: LoginComponent },\r\n\r\n  {path: 'customers', component: CustomerListComponent, canActivate: [AuthenticateGuard] },\r\n\r\n  {path: 'plans', component: PlanListComponent },\r\n\r\n  {path: 'add-plan', component: AddPlanComponent, canActivate: [AuthenticateGuard] },\r\n\r\n  {path: 'add-user', component: AddUserComponent, canActivate: [AuthenticateGuard] },\r\n\r\n  {path: '**', redirectTo: 'plans' }\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\"","module.exports = \"<app-menu-bar></app-menu-bar>\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'gym';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AppRoutingModule } from './/app-routing.module';\r\nimport { CustomerListComponent } from './customer-list/customer-list.component';\r\nimport { CustomerItemComponent } from './customer-item/customer-item.component';\r\nimport { SuiModule } from 'ng2-semantic-ui';\r\nimport { MenuBarComponent } from './menu-bar/menu-bar.component';\r\nimport { CustomerService } from './service/customer/customer.service';\r\nimport { AuthenticateService } from './service/authenticate/authenticate.service';\r\nimport { PlanService } from './service/plan/plan.service';\r\nimport { PlanListComponent } from './plan-list/plan-list.component';\r\nimport { PlanItemComponent } from './plan-item/plan-item.component';\r\nimport { AddPlanComponent } from './add-plan/add-plan.component';\r\nimport { AuthenticateGuard } from './service/guard/authenticate.guard';\r\nimport { AddUserComponent } from './add-user/add-user.component';\r\nimport { UserService } from './service/user/user.service';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    CustomerListComponent,\r\n    CustomerItemComponent,\r\n    MenuBarComponent,\r\n    PlanListComponent,\r\n    PlanItemComponent,\r\n    AddPlanComponent,\r\n    AddUserComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    SuiModule,\r\n    FormsModule\r\n  ],\r\n  providers: [CustomerService, AuthenticateService, PlanService, UserService, AuthenticateGuard],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"\\r\\n<div class=\\\"ui cards\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"content\\\">\\r\\n      <div class=\\\"header\\\">\\r\\n        Type:  {{customer.type}} -- {{customer.firstName}} {{customer.lastName}} \\r\\n      </div>\\r\\n      <div class=\\\"meta\\\">\\r\\n        {{customer.phone}}\\r\\n      </div>\\r\\n      <div class=\\\"description\\\">\\r\\n        {{customer.email}}\\r\\n      </div>\\r\\n    </div>\\r\\n    <ng-content select=\\\"[buttons]\\\"></ng-content>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, Input, HostBinding } from '@angular/core';\r\n\r\nimport { Customer } from '../model/customer';\r\n\r\n\r\n@Component({\r\n  selector: 'app-customer-item',\r\n  templateUrl: './customer-item.component.html',\r\n  styleUrls: ['./customer-item.component.css']\r\n})\r\nexport class CustomerItemComponent implements OnInit {\r\n\r\n  @Input() customer: Customer;\r\n  @HostBinding('class') columnClass = 'four wide column';\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".container {\\r\\n  margin-top: 50px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"ui container\\\">\\r\\n  <div class=\\\"ui grid\\\">\\r\\n    <app-customer-item *ngFor=\\\"let customer of customers | async\\\" [customer]=\\\"customer\\\">\\r\\n        <div class=\\\"extra content\\\" buttons>\\r\\n            <div class=\\\"ui three buttons\\\">\\r\\n            <button class=\\\"ui basic green button\\\">Approve</button>\\r\\n            <button class=\\\"ui basic blue button\\\">Modify</button>\\r\\n            <button class=\\\"ui basic red button\\\" (click)=\\\"deleteCustomer(customer._id)\\\">Delete</button>\\r\\n            </div>\\r\\n         </div>\\r\\n    </app-customer-item>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Customer } from '../model/customer';\r\nimport { CustomerService } from '../service/customer/customer.service';\r\n\r\n@Component({\r\n  selector: 'app-customer-list',\r\n  templateUrl: './customer-list.component.html',\r\n  styleUrls: ['./customer-list.component.css']\r\n})\r\nexport class CustomerListComponent implements OnInit {\r\n  // give customers a type of Observable<Customer[]>\r\n  customers: Observable<Customer[]>;\r\n\r\n  constructor(private customerService: CustomerService) { }\r\n  // retrieve all customers from customer service\r\n  getCustomers(): void {\r\n    this.customers = this.customerService.getCustomers();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getCustomers();\r\n  }\r\n  // delete a customer\r\n  deleteCustomer(id: string) {\r\n    window.alert('Are you want to kick out this customer?');\r\n    this.customerService.deleteCustomer(id).subscribe(data => {\r\n      this.getCustomers();\r\n    });\r\n  }\r\n\r\n}\r\n","module.exports = \".login-container {\\r\\n    max-width: 500px;\\r\\n    margin: 50px auto;\\r\\n  }\"","module.exports = \"<div class=\\\"login-container\\\">\\r\\n  <form class=\\\"ui big form\\\" #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"onLogin(loginForm)\\\">\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Username</label>\\r\\n        <input id=\\\"username\\\" type=\\\"text\\\" class=\\\"form-control\\\" required name=\\\"username\\\" placeholder=\\\"Enter your username\\\"\\r\\n           pattern=\\\"[a-z]{4}[0-9]{3}\\\" [(ngModel)]=\\\"user.username\\\" #username=\\\"ngModel\\\">\\r\\n            <div [hidden]=\\\"username.valid || username.pristine\\\"\\r\\n                  class=\\\"alert alert-danger\\\">\\r\\n                  The sign up pattern must be like eg.ffff222 \\r\\n            </div>\\r\\n    </div>\\r\\n    \\r\\n  <div class=\\\"field\\\">\\r\\n    <label>Password</label>\\r\\n      <input id=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\" required name=\\\"password\\\" placeholder=\\\"Enter your password\\\"\\r\\n        minlength=\\\"6\\\" [(ngModel)]=\\\"user.password\\\" #password=\\\"ngModel\\\">\\r\\n          <div [hidden]=\\\"password.valid || password.pristine\\\"\\r\\n            class=\\\"alert alert-danger\\\">\\r\\n                The password must be at least 6 words! \\r\\n          </div>\\r\\n  </div>\\r\\n  \\r\\n  <button type=\\\"submit\\\" class=\\\"ui primary button float right floated\\\"\\r\\n         [disabled]=\\\"loginForm.invalid\\\">Login</button>\\r\\n  </form>\\r\\n</div>\\r\\n  \"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { User } from '../model/user';\r\nimport { AuthenticateService } from '../service/authenticate/authenticate.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  // give user a type of User\r\n  user: User = {};\r\n\r\n  constructor(private authenticate: AuthenticateService,\r\n              private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    if ( this.authenticate.isLoggedIn()) {\r\n      // prevent duplicate login\r\n      this.router.navigate(['./cusomers']);\r\n    }\r\n  }\r\n\r\n  onLogin(form: NgForm) {\r\n    const input = form.value;\r\n\r\n    const payload = {\r\n      username: input.username,\r\n      password: input.password\r\n    };\r\n\r\n    this.authenticate.post(payload)\r\n    .subscribe(data => {\r\n      // create the token\r\n      this.authenticate.setToken(data.token);\r\n\r\n      this.router.navigate(['/customers']);\r\n    }, (err) => {\r\n      window.alert('Login failed! Please check your username or password');\r\n      console.log(err);\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"ui menu header\\\">\\r\\n  <div class=\\\"ui container\\\">\\r\\n    <div class=\\\"item\\\">\\r\\n      <a routerLink=\\\"../customers\\\" aria-label=\\\"Gym Management Dashboard\\\">\\r\\n        <i class=\\\"icon users large blue\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      </a>\\r\\n    </div>\\r\\n      <div class=\\\"header item\\\">\\r\\n        <h1>Gym Management Dashboard</h1>\\r\\n      </div>\\r\\n      <div class=\\\"item\\\" *ngIf=\\\"authenticate.isLoggedOut()\\\">\\r\\n        <a routerLink=\\\"../register\\\">\\r\\n        <button class=\\\"ui basic button\\\">\\r\\n          <i class=\\\"add user icon\\\" aria-hideen=\\\"true\\\">\\r\\n            Sign Up\\r\\n          </i>\\r\\n        </button>\\r\\n        </a>\\r\\n          <a routerLink=\\\"../login\\\">\\r\\n          <button class=\\\"ui basic button\\\">\\r\\n            <i class=\\\"add user icon\\\" aria-hideen=\\\"true\\\">\\r\\n              Sign In\\r\\n            </i>\\r\\n          </button>\\r\\n          </a>\\r\\n    </div>\\r\\n    <div class=\\\"header item\\\">\\r\\n      <a routerLink=\\\"../plans\\\">\\r\\n      <button class=\\\"ui basic button\\\">\\r\\n        <i class=\\\"user circle outline icon\\\" aria-hidden=\\\"true\\\">\\r\\n          View Plan\\r\\n        </i>\\r\\n      </button>\\r\\n    </a>\\r\\n    <a routerLink=\\\"../add-plan\\\">\\r\\n      <button class=\\\"ui basic button\\\" *ngIf=\\\"authenticate.isLoggedIn()\\\">\\r\\n        <i class=\\\"user circle outline icon\\\" aria-hidden=\\\"true\\\">\\r\\n          Add Plan\\r\\n        </i>\\r\\n      </button>\\r\\n    </a>\\r\\n    </div>\\r\\n    <div class=\\\"header item\\\">\\r\\n      <a routerLink=\\\"../add-user\\\">\\r\\n      <button class=\\\"ui basic button\\\" *ngIf=\\\"authenticate.isLoggedIn()\\\">\\r\\n        <i class=\\\"user circle outline icon\\\" aria-hidden=\\\"true\\\">\\r\\n          Add User\\r\\n        </i>\\r\\n      </button>\\r\\n      </a>\\r\\n    </div>\\r\\n    <div class=\\\"right menu\\\" *ngIf=\\\"authenticate.isLoggedIn()\\\">\\r\\n      <button class=\\\"ui primary button logout\\\" (click)=\\\"logout()\\\">logout</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticateService } from '../service/authenticate/authenticate.service';\r\n\r\n@Component({\r\n  selector: 'app-menu-bar',\r\n  templateUrl: './menu-bar.component.html',\r\n  styleUrls: ['./menu-bar.component.css']\r\n})\r\nexport class MenuBarComponent implements OnInit {\r\n\r\n  constructor(private authenticate: AuthenticateService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n // user log out\r\n  logout() {\r\n    this.authenticate.logOut();\r\n  }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"\\r\\n<div class=\\\"ui cards\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"content\\\">\\r\\n        <div class=\\\"header\\\">\\r\\n          Type: {{plan.type}} -- {{plan.title}}\\r\\n        </div>\\r\\n        <div class=\\\"meta\\\">\\r\\n          {{plan.time}}\\r\\n        </div>\\r\\n        <div class=\\\"description\\\">\\r\\n          {{plan.content}}\\r\\n        </div>\\r\\n        <div class=\\\"extra\\\">\\r\\n          {{plan.coach}}\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit, Input, HostBinding } from '@angular/core';\r\nimport { Plan } from '../model/plan';\r\n\r\n@Component({\r\n  selector: 'app-plan-item',\r\n  templateUrl: './plan-item.component.html',\r\n  styleUrls: ['./plan-item.component.css']\r\n})\r\nexport class PlanItemComponent implements OnInit {\r\n\r\n  @Input() plan: Plan;\r\n  @HostBinding('class') columnClass = 'four wide column';\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".container {\\r\\n    margin-top: 50px;\\r\\n  }\"","module.exports = \"<div class=\\\"ui container\\\">\\r\\n     <div class=\\\"ui grid\\\">\\r\\n       <app-plan-item *ngFor=\\\"let plan of plans | async\\\" [plan]=\\\"plan\\\"></app-plan-item>\\r\\n     </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PlanService } from '../service/plan/plan.service';\r\nimport { Plan } from '../model/plan';\r\n\r\n@Component({\r\n  selector: 'app-plan-list',\r\n  templateUrl: './plan-list.component.html',\r\n  styleUrls: ['./plan-list.component.css']\r\n})\r\nexport class PlanListComponent implements OnInit {\r\n  // give plans a type of Observable<Plan[]>\r\n  plans: Observable<Plan[]>;\r\n\r\n  constructor(private planService: PlanService) { }\r\n\r\n  // retrieve all the plans from plan service\r\n  getPlans(): void {\r\n    this.plans = this.planService.getPlans();\r\n  }\r\n\r\n  ngOnInit() {\r\n    return this.getPlans();\r\n  }\r\n\r\n}\r\n","module.exports = \".register-container {\\r\\n    max-width: 500px;\\r\\n    margin: 50px auto;\\r\\n  }\"","module.exports = \"<div class=\\\"register-container\\\">\\r\\n    <div class=\\\"ui icon message\\\" *ngIf=\\\"newCustomer\\\">\\r\\n        <i class=\\\"notched check green icon\\\"></i>\\r\\n        <i class=\\\"close icon\\\" (click)=\\\"newCustomer = null\\\"></i>\\r\\n        <div class=\\\"content\\\">\\r\\n          <div class=\\\"header\\\">\\r\\n            New customer registered!\\r\\n          </div>\\r\\n          <p>Email: {{newCustomer.email}}</p>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<form class=\\\"ui big form\\\" #registerForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(registerForm)\\\">\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>First Name</label>\\r\\n      <input id=\\\"firstName\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" required pattern=\\\"[A-Z]{1}[a-z].{0,}\\\"\\r\\n       placeholder=\\\"First Name\\\" [(ngModel)]=\\\"customer.firstName\\\" #firstName=\\\"ngModel\\\">\\r\\n      <div [hidden]=\\\"firstName.valid || firstName.pristine\\\"\\r\\n      class=\\\"alert alert-danger\\\">\\r\\n          The first word must be uppercase!\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n      <label>Last Name</label>\\r\\n      <input id=\\\"lastName\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" required pattern=\\\"[A-Z]{1}[a-z].{0,}\\\" \\r\\n      placeholder=\\\"Last Name\\\" [(ngModel)]=\\\"customer.lastName\\\" #lastName=\\\"ngModel\\\">\\r\\n      <div [hidden]=\\\"lastName.valid || lastName.pristine\\\"\\r\\n      class=\\\"alert alert-danger\\\">\\r\\n          The first word must be uppercase!\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n      <label for=\\\"phone\\\">Phone</label>\\r\\n      <input id=\\\"phone\\\" type=\\\"number\\\" class=\\\"form-control\\\" required pattern=\\\"[0-9]{10}\\\" placeholder=\\\"Phone\\\" [(ngModel)]=\\\"customer.phone\\\" name=\\\"phone\\\" #phone=\\\"ngModel\\\">\\r\\n      <div [hidden]=\\\"phone.valid || phone.pristine\\\"\\r\\n      class=\\\"alert alert-danger\\\">\\r\\n          Phone number must be 10 digits.\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field\\\">\\r\\n      <label for=\\\"email\\\">Email</label>\\r\\n      <input id=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" required name=\\\"email\\\"\\r\\n       pattern=\\\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\"\\r\\n       placeholder=\\\"Email\\\" [(ngModel)]=\\\"customer.email\\\" #email=\\\"ngModel\\\">\\r\\n       <div [hidden]=\\\"email.valid || email.pristine\\\"\\r\\n       class=\\\"alert alert-danger\\\">\\r\\n           Ops! Missing \\\"@\\\" or \\\".com\\\", please enter a valid email.\\r\\n      </div>\\r\\n    </div>\\r\\n    \\r\\n    <div class=\\\"inline fields\\\">\\r\\n        <label>Interested training plan:</label>\\r\\n          <input type=\\\"radio\\\" required name=\\\"type\\\" value=\\\"A\\\" ngModel> A-Slim<br>\\r\\n          <input type=\\\"radio\\\" required name=\\\"type\\\" value=\\\"B\\\" ngModel> B-Muscle<br>\\r\\n          <input type=\\\"radio\\\" required name=\\\"type\\\" value=\\\"C\\\" ngModel> C-Fitness<br>\\r\\n    </div>\\r\\n    <button type=\\\"submit\\\" class=\\\"ui primary button float right floated\\\"\\r\\n    [disabled]=\\\"registerForm.invalid\\\">Register</button>\\r\\n  </form>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n\r\nimport { Customer } from '../model/customer';\r\nimport { CustomerService } from '../service/customer/customer.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  // give newCustomer a type of Customer\r\n  newCustomer: Customer;\r\n  customer: Customer = {};\r\n\r\n  constructor(private customerService: CustomerService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    // refer to the value in the form\r\n    const formInput = Object.assign({}, form.value);\r\n    // give the form value to each of customer attribute\r\n    const customer: Customer = {\r\n      firstName: formInput.firstName,\r\n      lastName: formInput.lastName,\r\n      phone: formInput.phone,\r\n      email: formInput.email,\r\n      type: formInput.type\r\n    };\r\n    // call the postCustomer to add customer\r\n    this.customerService.postCustomer(customer)\r\n    .subscribe(data => {\r\n      // reset the form\r\n      form.reset();\r\n      this.newCustomer = data;\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { User } from '../../model/user';\r\nimport { Token } from '../../model/token';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticateService {\r\n\r\n  // set storage key\r\n  storageKey = 'authenticate-jwt';\r\n  // set related url\r\n  loginUrl = '/api/login';\r\n  // give users a type of User[]\r\n  users: User[];\r\n\r\n  constructor(private router: Router,\r\n              private http: HttpClient) { }\r\n  // get authorization options, content type and authorization\r\n  getAuthorizationOptions() {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'Bearer ' + this.getToken()\r\n      })\r\n    };\r\n  }\r\n  // add user's token\r\n  post(user: User): Observable<Token> {\r\n    return this.http.post<Token>(this.loginUrl, user);\r\n  }\r\n  // set the token\r\n  setToken(token: string) {\r\n    localStorage.setItem(this.storageKey, token);\r\n  }\r\n  // retrieve the token\r\n  getToken() {\r\n    return localStorage.getItem(this.storageKey);\r\n  }\r\n  // check if user is logged in\r\n  isLoggedIn() {\r\n    return this.getToken() != null;\r\n  }\r\n  // check if user is logged out\r\n  isLoggedOut() {\r\n    return this.getToken() == null;\r\n  }\r\n  // user log out\r\n  logOut() {\r\n    // remove the token stored in local storage\r\n    localStorage.removeItem(this.storageKey);\r\n    // if user logout, go back to login\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\nimport { AuthenticateService } from '../authenticate/authenticate.service';\r\nimport { Customer } from '../../model/customer';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomerService {\r\n  // set the related urls\r\n  customerUrl = '/api/customers';\r\n  registerUrl = '/api/register';\r\n  // give customers a type of Customer[]\r\n  customers: Customer[];\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type':  'application/json'\r\n    })\r\n  };\r\n\r\n  constructor(private http: HttpClient, private authenticate: AuthenticateService) { }\r\n\r\n  // retrieve all the customers from database\r\n  getCustomers(): Observable<Customer[]> {\r\n    return this.http.get<Customer[]>(this.customerUrl, this.authenticate.getAuthorizationOptions());\r\n  }\r\n  // register a new customer to database\r\n  postCustomer(customer: Customer): Observable<Customer> {\r\n    return this.http.post<Customer>(this.registerUrl, customer, this.httpOptions);\r\n  }\r\n  // delete the selected customer from database\r\n  deleteCustomer (id: string): Observable<{}> {\r\n    const url = `${this.customerUrl}/${id}`;\r\n    return this.http.delete(url, this.authenticate.getAuthorizationOptions());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticateService } from '../authenticate/authenticate.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticateGuard implements CanActivate {\r\n\r\n  constructor(private authenticateService: AuthenticateService,\r\n              private router: Router) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n      // check if the user is loggedin\r\n    if (this.authenticateService.isLoggedIn()) {\r\n      return true;\r\n    } else {\r\n      // if a wrong url inserted, go back to home page\r\n      this.router.navigate(['/plans']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\nimport { AuthenticateService } from '../authenticate/authenticate.service';\r\nimport { Plan } from '../../model/plan';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PlanService {\r\n  // set the related url\r\n  planUrl = '/api/plans';\r\n  addPlanrUrl = '/api/add-plan';\r\n  // give plans a type of Plan[]\r\n  plans: Plan[];\r\n  // setting httpOptions, set new header\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type':  'application/json'\r\n    })\r\n  };\r\n  constructor(private http: HttpClient, private authenticate: AuthenticateService) { }\r\n  // retrieve all the plans\r\n  getPlans(): Observable<Plan[]> {\r\n    return this.http.get<Plan[]>(this.planUrl, this.authenticate.getAuthorizationOptions());\r\n  }\r\n  // add a new plan to database\r\n  postPlan(plan: Plan): Observable<Plan> {\r\n    return this.http.post<Plan>(this.addPlanrUrl, plan, this.authenticate.getAuthorizationOptions());\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { AuthenticateService } from '../authenticate/authenticate.service';\nimport { User } from '../../model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  addUserUrl = '/api/add-user';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type':  'application/json'\n    })\n  };\nconstructor(private http: HttpClient, private authenticate: AuthenticateService) { }\n\n// add user to database\npostUser(user: User): Observable<User> {\n  return this.http.post<User>(this.addUserUrl, user, this.authenticate.getAuthorizationOptions());\n}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  url: '/gym'\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}